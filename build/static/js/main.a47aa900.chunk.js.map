{"version":3,"sources":["Pages/Components/Navigationbar.jsx","Pages/Home/index.jsx","Pages/Login/index.jsx","Pages/Exercise/index.jsx","routes.js","App.jsx","serviceWorker.js","store/index.jsx","index.jsx"],"names":["Navigationbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","className","Link","Home","Login","Exercise","Routes","path","component","exact","App","Boolean","window","location","hostname","match","INITIAL_STATE","token","reducer","combineReducers","auth","state","action","type","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAMe,SAASA,IACvB,OACC,kBAAC,IAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,UAAUC,QAAQ,QACzD,kBAAC,IAAD,KACC,kBAAC,IAAOC,MAAR,CAAcC,KAAK,KAAnB,SACA,kBAAC,IAAOC,OAAR,CAAeC,gBAAc,0BAC7B,kBAAC,IAAOC,SAAR,CAAiBC,GAAG,yBACnB,kBAAC,IAAD,CAAKC,UAAU,WACd,kBAAC,IAAIC,KAAL,CAAUN,KAAK,UAAf,aCVS,SAASO,IACvB,OACC,oCACC,kBAACb,EAAD,MACA,qCCJY,SAASc,IACvB,OACC,oCACC,kBAACd,EAAD,MACA,sCCNY,SAASe,IACpB,OAAO,qCCKI,SAASC,IACvB,OACC,kBAAC,IAAD,KACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWL,EAAMM,OAAK,IACtC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWJ,IAChC,kBAAC,IAAD,CAAOG,KAAK,YAAYC,UAAWH,MCMxBK,MARf,WACC,OACC,oCACC,kBAACJ,EAAD,QCHiBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mlBChBN,IAAMC,EAAgB,CACrBC,MAAO,IAcR,IAAMC,EAAUC,YAAgB,CAAEC,KAXlC,WAA8C,IAAhCC,EAA+B,uDAAvBL,EAAeM,EAAQ,uCAC5C,OAAQA,EAAOC,MACd,IAAK,YACJ,OAAO,EAAP,GAAYF,EAAZ,CAAmBJ,MAAOK,EAAOL,QAClC,IAAK,cACJ,OAAO,EAAP,GAAYI,EAAZ,CAAmBJ,MAAO,KAC3B,QACC,OAAOI,MAQKG,EAFDC,YAAYP,GCV1BQ,IAASC,OACR,kBAAC,IAAD,CAAUH,MAAOA,GAChB,kBAAC,EAAD,OAEDI,SAASC,eAAe,SFoHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a47aa900.chunk.js","sourcesContent":["import React from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nexport default function Navigationbar() {\n\treturn (\n\t\t<Navbar collapseOnSelect expand=\"md\" bg=\"primary\" variant=\"dark\">\n\t\t\t<Container>\n\t\t\t\t<Navbar.Brand href=\"/\">MEGUA</Navbar.Brand>\n\t\t\t\t<Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n\t\t\t\t<Navbar.Collapse id=\"responsive-navbar-nav\">\n\t\t\t\t\t<Nav className=\"ml-auto\">\n\t\t\t\t\t\t<Nav.Link href=\"/Login\">Login</Nav.Link>\n\t\t\t\t\t</Nav>\n\t\t\t\t</Navbar.Collapse>\n\t\t\t</Container>\n\t\t</Navbar>\n\t);\n}\n","import React from 'react';\n\nimport Navigationbar from '../Components/Navigationbar';\n\nexport default function Home() {\n\treturn (\n\t\t<>\n\t\t\t<Navigationbar />\n\t\t\t<h1>Home</h1>\n\t\t</>\n\t);\n}\n","import React from 'react';\n\nimport Navigationbar from '../Components/Navigationbar';\n\nexport default function Login() {\n\treturn (\n\t\t<>\n\t\t\t<Navigationbar />\n\t\t\t<h1>Login</h1>\n\t\t</>\n\t);\n}\n","import React from 'react'\n\nexport default function Exercise() {\n    return(<>\n    </>)\n}","import React from 'react';\n\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport Home from './Pages/Home';\nimport Login from './Pages/Login';\nimport Exercise from './Pages/Exercise';\n\nexport default function Routes() {\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<Switch>\n\t\t\t\t<Route path=\"/\" component={Home} exact />\n\t\t\t\t<Route path=\"/Login\" component={Login} />\n\t\t\t\t<Route path=\"/Exercise\" component={Exercise} />\n\t\t\t</Switch>\n\t\t</BrowserRouter>\n\t);\n}\n","import React from 'react';\nimport './App.css';\n\n// import Button from 'react-bootstrap/Button';\n// import FormControl from 'react-bootstrap/FormControl';\n// import Image from 'react-bootstrap/Image';\n// import Row from 'react-bootstrap/Row';\n// import Col from 'react-bootstrap/Col';\n// import InputGroup from 'react-bootstrap/InputGroup';\n// import logo from './media/logo.png';\n\nimport Routes from './routes';\nfunction App() {\n\treturn (\n\t\t<>\n\t\t\t<Routes />\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, combineReducers } from 'redux';\n\nconst INITIAL_STATE = {\n\ttoken: ''\n};\n\nfunction auth(state = INITIAL_STATE, action) {\n\tswitch (action.type) {\n\t\tcase 'SET_TOKEN':\n\t\t\treturn { ...state, token: action.token };\n\t\tcase 'REMOVE_TOKE':\n\t\t\treturn { ...state, token: '' };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst reducer = combineReducers({ auth: auth });\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport store from './store';\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}